!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=2)}({2:function(e,t){!function(){function e(){}e.prototype.setup=function(e){this.shapes=[],this.currentShape=0,this.shapes.push({points:Shapes.circle(e,100),color:e.color("#009CDF")}),this.shapes.push({points:Shapes.circle(e,150),color:e.color(255,204,0)}),this.shapes.push({points:Shapes.square(e,50),color:e.color(175,100,220)}),this.morph=new Array;for(var t=0,r=0;r<this.shapes.length;r++)t=Math.max(t,this.shapes[r].points.length);for(r=0;r<t;r++)this.morph.push(new p5.Vector)},e.prototype.recalc=function(e){for(var t=0,r=this.shapes[this.currentShape].points,n=0;n<r.length;n++){var o=r[n],s=this.morph[n];s.lerp(o,.1),t+=p5.Vector.dist(o,s)}t<.1&&(this.currentShape++,this.currentShape>=this.shapes.length&&(this.currentShape=0))},e.prototype.draw=function(e){this.recalc(e);var t=this.shapes[this.currentShape].color,r=this.shapes[this.currentShape].points;e.translate(e.width/2,e.height/2),e.strokeWeight(4),e.beginShape(),e.noFill(),e.stroke(t);for(var n=0;n<r.length;n++){var o=this.morph[n];e.vertex(o.x,o.y)}e.endShape(e.CLOSE)}}()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,